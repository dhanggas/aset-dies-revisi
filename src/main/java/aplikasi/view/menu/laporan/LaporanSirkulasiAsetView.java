/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplikasi.view.menu.laporan;

import aplikasi.config.KoneksiDB;
import aplikasi.config.ValueFormatter;
import aplikasi.controller.TableViewController;
import aplikasi.entity.Aset;
import aplikasi.entity.PeminjamanDetail;
import aplikasi.entity.PengembalianDetail;
import aplikasi.entity.Users;
import aplikasi.entity.other.SirkulasiAset;
import aplikasi.repository.RepoAset;
import aplikasi.repository.RepoPeminjaman;
import aplikasi.repository.RepoPengembalian;
import aplikasi.service.ServiceAset;
import aplikasi.service.ServicePeminjaman;
import aplikasi.service.ServicePengembalian;
import aplikasi.view.MainMenuView;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author laptop
 */
public class LaporanSirkulasiAsetView extends javax.swing.JInternalFrame {

    private final MainMenuView menuController;
    private final RepoAset repoAset;
    private final RepoPengembalian repoPengembalian;
    private final RepoPeminjaman repoPeminjaman;
    private final TableViewController tableController;
    private final List<SirkulasiAset> daftarSirkulasiAset = new ArrayList<>();
    private List<Aset> daftarAset = new ArrayList<>();
    private Users p;

    private class JumlahAset {

        private Aset aset;
        private Integer jumlah;

        public JumlahAset() {
        }

        public JumlahAset(Aset aset, Integer jumlah) {
            this.aset = aset;
            this.jumlah = jumlah;
        }

        public Aset getAset() {
            return aset;
        }

        public void setAset(Aset aset) {
            this.aset = aset;
        }

        public Integer getJumlah() {
            return jumlah;
        }

        public void setJumlah(Integer jumlah) {
            this.jumlah = jumlah;
        }

    }

    public LaporanSirkulasiAsetView(MainMenuView menuController, Users p) {
        this.menuController = menuController;
        this.repoAset = new ServiceAset(KoneksiDB.getDataSource());
        this.repoPeminjaman = new ServicePeminjaman(KoneksiDB.getDataSource());

        this.repoPengembalian = new ServicePengembalian(KoneksiDB.getDataSource());

        this.p = p;
        initComponents();
        txtTanggalAkhir.setDate(new Date());
        txtTanggalAwal.setDate(new Date());
        this.tableController = new TableViewController(tableView);

        try {
            daftarAset = repoAset.findAll();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Tidak dapat mendapatkan data barang", getTitle(), JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LaporanSirkulasiAsetView.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    private void refreshDataTable() {
        tableController.clearData();
        for (SirkulasiAset sirkulasi : daftarSirkulasiAset) {
            Aset brg = sirkulasi.getAset();
            Object[] row = {
                brg.getKode(),
                brg.getNama(),
                brg.getKategoriAset().getNama_kategori(),
                sirkulasi.getStokAsetAwal(),
                sirkulasi.getStokAsetMasuk(),
                sirkulasi.getStokAsetKeluar(),
                sirkulasi.getStokAsetSekarang()
            };
            tableController.getModel().addRow(row);
        }
        tableController.setContentTableAlignment(Arrays.asList(0, 2, 3, 4, 5, 6));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        txtTanggalAwal = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        txtTanggalAkhir = new com.toedter.calendar.JDateChooser();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnProses = new javax.swing.JButton();
        btnCetak = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();

        setTitle("Laporan Sirkulasi Aset");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(721, 52));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setBorder(null);
        jToolBar1.setRollover(true);

        jLabel1.setText(" Tanggal : ");
        jToolBar1.add(jLabel1);

        txtTanggalAwal.setMaximumSize(new java.awt.Dimension(120, 29));
        txtTanggalAwal.setMinimumSize(new java.awt.Dimension(120, 29));
        txtTanggalAwal.setPreferredSize(new java.awt.Dimension(120, 29));
        jToolBar1.add(txtTanggalAwal);

        jLabel2.setText("s/d");
        jToolBar1.add(jLabel2);

        txtTanggalAkhir.setMaximumSize(new java.awt.Dimension(120, 29));
        txtTanggalAkhir.setMinimumSize(new java.awt.Dimension(120, 29));
        txtTanggalAkhir.setPreferredSize(new java.awt.Dimension(120, 29));
        jToolBar1.add(txtTanggalAkhir);

        jSeparator1.setMaximumSize(new java.awt.Dimension(5, 5));
        jSeparator1.setMinimumSize(new java.awt.Dimension(5, 5));
        jSeparator1.setPreferredSize(new java.awt.Dimension(5, 5));
        jSeparator1.setSeparatorSize(new java.awt.Dimension(5, 5));
        jToolBar1.add(jSeparator1);

        btnProses.setText("Proses");
        btnProses.setFocusable(false);
        btnProses.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProses.setMaximumSize(new java.awt.Dimension(100, 29));
        btnProses.setMinimumSize(new java.awt.Dimension(100, 29));
        btnProses.setPreferredSize(new java.awt.Dimension(100, 29));
        btnProses.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProsesActionPerformed(evt);
            }
        });
        jToolBar1.add(btnProses);

        btnCetak.setText("Cetak");
        btnCetak.setEnabled(false);
        btnCetak.setFocusable(false);
        btnCetak.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCetak.setMaximumSize(new java.awt.Dimension(100, 29));
        btnCetak.setMinimumSize(new java.awt.Dimension(100, 29));
        btnCetak.setPreferredSize(new java.awt.Dimension(100, 29));
        btnCetak.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCetak);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Daftar Aset"));

        tableView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Kode", "Nama Aset", "Kategori", "Awal", "Masuk", "Keluar", "Sekarang"
            }
        ));
        jScrollPane1.setViewportView(tableView);
        if (tableView.getColumnModel().getColumnCount() > 0) {
            tableView.getColumnModel().getColumn(0).setPreferredWidth(150);
            tableView.getColumnModel().getColumn(0).setMaxWidth(150);
            tableView.getColumnModel().getColumn(1).setPreferredWidth(400);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProsesActionPerformed
        try {
            java.sql.Date tglAwal = java.sql.Date.valueOf(ValueFormatter.getDateSQL(txtTanggalAwal.getDate()));
            java.sql.Date tglAkhir = java.sql.Date.valueOf(ValueFormatter.getDateSQL(txtTanggalAkhir.getDate()));

            List<PengembalianDetail> daftarTambahPengembalian = repoPengembalian.findPengembalianDetailBetweenTanggal(tglAwal, tglAkhir);
            List<PeminjamanDetail> daftarHapusPeminjaman = repoPeminjaman.findPeminjamanByTglBetween(tglAwal, tglAkhir);

            List<PengembalianDetail> daftarTambahPengembalianSebelum = repoPengembalian.findPengembalianDetailByTanggalLowerThen(tglAwal);
            List<PeminjamanDetail> daftarHapusPeminjamanSebelum = repoPeminjaman.findPeminjamanDetailByTanggalLowerThen(tglAwal);

            mergeList(
                getAsetMasukPengembalian(daftarTambahPengembalianSebelum),
                getAsetMasukPengembalian(daftarTambahPengembalian),
                getAsetkeluarPeminjaman(daftarHapusPeminjamanSebelum),
                getAsetkeluarPeminjaman(daftarHapusPeminjaman));

        } catch (Exception ex) {
            Logger.getLogger(LaporanSirkulasiAsetView.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btnProsesActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
        if (daftarSirkulasiAset.size() > 0) {
            try {
                String url = "/laporan/SirkulasiAset.jasper";
                Map<String, Object> map = new HashMap<>();
                map.put("tglAwal", txtTanggalAwal.getDate());
                map.put("tglAkhir", txtTanggalAkhir.getDate());
                map.put("pengguna", p.getNama());
                map.put("jabatan", p.getJabatan().toString());
                JasperPrint print = JasperFillManager.fillReport(
                    getClass().getResourceAsStream(url),
                    map,
                    new JRBeanCollectionDataSource(daftarSirkulasiAset));
                JasperViewer view = new JasperViewer(print, false);
                view.setLocationRelativeTo(null);
                view.setExtendedState(JasperViewer.MAXIMIZED_BOTH);
                view.setVisible(true);
            } catch (JRException ex) {
                Logger.getLogger(LaporanSirkulasiAsetView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Data belum diproses", getTitle(), JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCetakActionPerformed
    private List<JumlahAset> getAsetMasukPengembalian(List<PengembalianDetail> daftarTambah) {
        List<JumlahAset> list = new ArrayList<>();
        for (Aset aset : daftarAset) {
            Integer jumlah = 0;
            for (PengembalianDetail tambah : daftarTambah) {
                Aset a = tambah.getAset();
                if (aset.getKode().equalsIgnoreCase(a.getKode())) {
                    jumlah += tambah.getQty();
                }
            }
            list.add(new JumlahAset(aset, jumlah));
        }
        return list;
    }


    private List<JumlahAset> getAsetkeluarPeminjaman(List<PeminjamanDetail> daftarHapus) {
        List<JumlahAset> list = new ArrayList<>();
        for (Aset barang : daftarAset) {
            Integer jumlah = 0;
            for (PeminjamanDetail hapus : daftarHapus) {
                Aset b = hapus.getAset();
                if (barang.getKode().equalsIgnoreCase(b.getKode())) {
                    jumlah += hapus.getQty();
                }
            }
            list.add(new JumlahAset(barang, jumlah));
        }
        return list;
    }

    public Integer jumlah(Aset aset, List<JumlahAset> daftar) {
        Integer hasil = 0;
        for (JumlahAset data : daftar) {
            if (data.getAset().getKode().equalsIgnoreCase(aset.getKode())) {
                hasil += data.getJumlah();
            }
        }
        return hasil;
    }

    private void mergeList(
            List<JumlahAset> tambahPengembalianSebelum,
            List<JumlahAset> tambahPengembalian,
            List<JumlahAset> hapusPeminjamanSebelum,
            List<JumlahAset> hapusPeminjaman) {

        daftarSirkulasiAset.clear();
        for (Aset aset : daftarAset) {
            SirkulasiAset sirkulasi = new SirkulasiAset();
            sirkulasi.setAset(aset);
            Integer jmlSebelumMasuk = jumlah(aset, tambahPengembalianSebelum);
            Integer jmlSebelumKeluar = jumlah(aset, hapusPeminjamanSebelum);
            sirkulasi.setStokAsetAwal(jmlSebelumMasuk - jmlSebelumKeluar + 1);

            sirkulasi.setStokAsetMasuk(jumlah(aset, tambahPengembalian));
            sirkulasi.setStokAsetKeluar(jumlah(aset, hapusPeminjaman));
            sirkulasi.setStokAsetSekarang(aset.getQty());
            daftarSirkulasiAset.add(sirkulasi);
        }
        refreshDataTable();
        if (!daftarSirkulasiAset.isEmpty()) {
            btnCetak.setEnabled(true);
        } else {
            btnCetak.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnProses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tableView;
    private com.toedter.calendar.JDateChooser txtTanggalAkhir;
    private com.toedter.calendar.JDateChooser txtTanggalAwal;
    // End of variables declaration//GEN-END:variables
}
