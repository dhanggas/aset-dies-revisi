/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplikasi.view.menu.approval;

import aplikasi.config.KoneksiDB;
import aplikasi.config.ValueFormatter;
import aplikasi.controller.TableViewController;
import aplikasi.entity.Aset;
import aplikasi.entity.KategoriAset;
import aplikasi.entity.Kepemilikan;
import aplikasi.entity.Peminjaman;
import aplikasi.entity.PeminjamanDetail;
import aplikasi.entity.Pengembalian;
import aplikasi.entity.PengembalianDetail;
import aplikasi.entity.Users;
import aplikasi.repository.RepoPeminjaman;
import aplikasi.repository.RepoPengembalian;
import aplikasi.service.ServicePeminjaman;
import aplikasi.service.ServicePengembalian;
import aplikasi.view.MainMenuView;
import aplikasi.view.menu.laporan.*;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author laptop
 */
public final class ApprovalTransaksi extends javax.swing.JInternalFrame {

    private final MainMenuView mainMenuController;
    private final TableViewController tableController;
    private final TableViewController tableControllerDetail;
    private Users p;
    private int jenisTransaksi = 1;
    private final RepoPeminjaman repoPeminjaman = new ServicePeminjaman(KoneksiDB.getDataSource());
    private List<Peminjaman> daftarPeminjaman = new ArrayList<>();
    private List<PeminjamanDetail> daftarPeminjamanDetail = new ArrayList<>();

    private final RepoPengembalian repoPengembalian = new ServicePengembalian(KoneksiDB.getDataSource());
    private List<Pengembalian> daftarPengembalian = new ArrayList<>();
    private List<PengembalianDetail> daftarPengembalianDetail = new ArrayList<>();

    /**
     * Creates new form LaporanPenambahan
     *
     * @param mainMenuController
     */
    public ApprovalTransaksi(MainMenuView mainMenuController, Users p) {
        initComponents();
        this.mainMenuController = mainMenuController;
        this.tableController = new TableViewController(tableView);
        this.tableControllerDetail = new TableViewController(tableViewDetail);
        this.tableController.setContentTableAlignment(Arrays.asList(0, 1));
        this.tableControllerDetail.setContentTableAlignment(Arrays.asList(0, 2, 3));
        this.p = p;
        refreshDataTablesPeminjaman();
        jPanel1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        pmnuApproval = new javax.swing.JMenuItem();
        pmnuTolak = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboTransaksi = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableViewDetail = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPembawa = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        lblKet = new javax.swing.JLabel();
        lblOpen = new javax.swing.JLabel();
        txtKet = new javax.swing.JTextField();
        txtOpen = new javax.swing.JTextField();
        txtApproval = new javax.swing.JTextField();
        btnTolak = new javax.swing.JButton();
        btnSetuju = new javax.swing.JButton();

        pmnuApproval.setText("Setujui Transaksi");
        pmnuApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuApprovalActionPerformed(evt);
            }
        });
        jPopupMenu1.add(pmnuApproval);

        pmnuTolak.setText("Tolak Transaksi");
        pmnuTolak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuTolakActionPerformed(evt);
            }
        });
        jPopupMenu1.add(pmnuTolak);

        setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(99, 130, 203)));
        setTitle("Approval Transaksi Peminjaman");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(721, 52));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Pilih Transaksi : ");

        cboTransaksi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Peminjaman", "Pengembalian" }));
        cboTransaksi.setToolTipText("Pilih transaksi yang akan dihapus");
        cboTransaksi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTransaksiItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(cboTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Transaksi"));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 272));

        tableView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Kode", "Tanggal", "Approval"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableView.setToolTipText("");
        tableView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableViewMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableView);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Detail Transaksi"));

        tableViewDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Kode", "Nama Aset", "Kategori", "Kepemilikan", "Jumlah", "Diinput"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableViewDetail);
        if (tableViewDetail.getColumnModel().getColumnCount() > 0) {
            tableViewDetail.getColumnModel().getColumn(0).setPreferredWidth(100);
            tableViewDetail.getColumnModel().getColumn(0).setMaxWidth(100);
            tableViewDetail.getColumnModel().getColumn(2).setPreferredWidth(100);
            tableViewDetail.getColumnModel().getColumn(2).setMaxWidth(100);
            tableViewDetail.getColumnModel().getColumn(4).setPreferredWidth(50);
            tableViewDetail.getColumnModel().getColumn(4).setMaxWidth(50);
            tableViewDetail.getColumnModel().getColumn(5).setPreferredWidth(65);
            tableViewDetail.getColumnModel().getColumn(5).setMaxWidth(65);
        }

        jLabel3.setText("Pembawa");

        jLabel4.setText("Diinput Oleh ");

        txtPembawa.setEditable(false);

        txtUser.setEditable(false);

        lblKet.setText("Ket");

        lblOpen.setText("Status");

        txtKet.setEditable(false);

        txtOpen.setEditable(false);

        txtApproval.setEditable(false);
        txtApproval.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtApproval.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtApproval.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtApprovalCaretUpdate(evt);
            }
        });

        btnTolak.setText("Tolak");
        btnTolak.setEnabled(false);
        btnTolak.setFocusPainted(false);
        btnTolak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTolakActionPerformed(evt);
            }
        });

        btnSetuju.setText("Setuju");
        btnSetuju.setEnabled(false);
        btnSetuju.setFocusPainted(false);
        btnSetuju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetujuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPembawa, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(txtUser))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblKet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtKet, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(txtOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApproval)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSetuju, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTolak, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnSetuju, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTolak, javax.swing.GroupLayout.PREFERRED_SIZE, 31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPembawa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUser, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtKet, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(lblKet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOpen)
                            .addComponent(txtApproval))))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(96, 96, 96))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void refreshDataTablesPeminjaman() {
        try {
            tableController.clearData();
            this.daftarPeminjaman = repoPeminjaman.findAll();
            for (Peminjaman pn : daftarPeminjaman) {
                Object[] row = {pn.getKode(), ValueFormatter.getLocalDateShort(pn.getTanggal().toLocalDate()), pn.getApproval()};
                tableController.getModel().addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(LaporanAset.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableController.setContentTableAlignment(Arrays.asList(0, 1, 2));
//        clearField();

    }

    public void refreshDataTablesPengembalian() {
        try {
            tableController.clearData();
            this.daftarPengembalian = repoPengembalian.findAll();
            for (Pengembalian pd : daftarPengembalian) {
                Object[] row = {pd.getKode(), ValueFormatter.getLocalDateShort(pd.getTanggal().toLocalDate())};
                tableController.getModel().addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(LaporanAset.class.getName()).log(Level.SEVERE, null, ex);
        }
//        clearField();
    }

    private void setFields(Pengembalian kembali) {
        try {
            daftarPengembalianDetail = repoPengembalian.findPengembalianDetailFilter(kembali.getKode());
            tableControllerDetail.clearData();
            for (PengembalianDetail detailKembali : daftarPengembalianDetail) {
                Aset aset = detailKembali.getAset();
                KategoriAset kategori = aset.getKategoriAset();
                Object[] row = {
                    //                    detailKembali.getId(),
                    aset.getKode(),
                    aset.getNama(),
                    kategori.getNama_kategori(),
                    detailKembali.getQty()
                };
                tableControllerDetail.getModel().addRow(row);
            }
            txtPembawa.setText(kembali.getPembawa());
            txtUser.setText(kembali.getUser().getNama());
            txtKet.setText(kembali.getKet());
            lblOpen.setVisible(false);
            txtOpen.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(ApprovalTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void setFields(Peminjaman pinjam) {
        try {
            daftarPeminjamanDetail = repoPeminjaman.findPeminjamanDetailFilter(pinjam.getKode());
            tableControllerDetail.clearData();
            for (PeminjamanDetail detailPinjam : daftarPeminjamanDetail) {
                Aset aset = detailPinjam.getAset();
                KategoriAset kategori = aset.getKategoriAset();
                Kepemilikan kepemilikan = aset.getKepemilikan();
                Object[] row = {
                    //                    detailPinjam.getId(),
                    aset.getKode(),
                    aset.getNama(),
                    kategori.getNama_kategori(),
                    kepemilikan.getNama(),
                    detailPinjam.getQty(),
                    detailPinjam.getPeminjaman().getUser().getUsername()

                };
                tableControllerDetail.getModel().addRow(row);
            }
            txtPembawa.setText(pinjam.getPembawa());
            txtUser.setText(pinjam.getUser().getNama());
            txtKet.setText(pinjam.getKet());
            txtApproval.setText(pinjam.getApproval());
            lblOpen.setVisible(true);
            txtOpen.setVisible(true);
            if (pinjam.isOpen()) {
                txtOpen.setText("OPEN");
                txtOpen.setForeground(Color.red);
            } else {
                txtOpen.setText("CLOSE");
                txtOpen.setForeground(Color.black);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ApprovalTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableControllerDetail.setContentTableAlignment(Arrays.asList(0, 2, 3, 4, 5));
    }
    private void tableViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewMouseClicked
        if (tableController.isSelected()) {
            switch (jenisTransaksi) {
                case 1:
                    Peminjaman peminjaman = daftarPeminjaman.get(tableController.getRowSelected());
                    setFields(peminjaman);
                    if (txtApproval.getText().isEmpty()) {
                        btnApprovalEnable();
                    } else {
                        btnApprovalDisable();
                    }
                    break;
                case 2:
                    Pengembalian pengembalian = daftarPengembalian.get(tableController.getRowSelected());
                    setFields(pengembalian);
                    break;
                default:
                    System.out.println("tampil default");
                    break;
            }
        } else {
            tableControllerDetail.clearData();
        }
    }//GEN-LAST:event_tableViewMouseClicked

    private void cboTransaksiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTransaksiItemStateChanged
        jenisTransaksi = cboTransaksi.getSelectedIndex() + 1;
        tableControllerDetail.clearData();
        switch (jenisTransaksi) {
            case 1:
                refreshDataTablesPeminjaman();
                break;
            case 2:
                refreshDataTablesPengembalian();
                break;
            default:
                refreshDataTablesPeminjaman();
                System.out.println("tampil defauld");
        }

        txtPembawa.setText("");
        txtUser.setText("");
        txtKet.setText("");
        txtOpen.setText("");
    }//GEN-LAST:event_cboTransaksiItemStateChanged

    private void pmnuApprovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmnuApprovalActionPerformed
        if (tableController.isSelected()) {
            switch (jenisTransaksi) {
                case 1:
                    terimaTransaksiPeminjaman();
                    refreshDataTablesPeminjaman();
                    break;
                case 2:
//                    hapusTransaksiPengembalian();
                    refreshDataTablesPengembalian();
                    break;
                default:
                    refreshDataTablesPeminjaman();
                    System.out.println("jenis transakssi null");
                    break;
            }
    }//GEN-LAST:event_pmnuApprovalActionPerformed
    }
    private void tableViewMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewMouseReleased
//        if (evt.isPopupTrigger()) {
//            JTable source = (JTable) evt.getSource();
//            int row = source.rowAtPoint(evt.getPoint());
//            int column = source.columnAtPoint(evt.getPoint());
//            if (!source.isRowSelected(row)) {
//                source.changeSelection(row, column, false, false);
//            }
//            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
//        }
    }//GEN-LAST:event_tableViewMouseReleased

    private void pmnuTolakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmnuTolakActionPerformed
        if (tableController.isSelected()) {
            switch (jenisTransaksi) {
                case 1:
                    tolakTransaksiPeminjaman();
                    refreshDataTablesPeminjaman();
                    break;
                case 2:
//                    hapusTransaksiPengembalian();
                    refreshDataTablesPengembalian();
                    break;
                default:
                    refreshDataTablesPeminjaman();
                    System.out.println("jenis transakssi null");
                    break;
            }
    }//GEN-LAST:event_pmnuTolakActionPerformed
    }

    private void btnApprovalEnable() {
        btnSetuju.setEnabled(true);
        btnTolak.setEnabled(true);
    }

    private void btnApprovalDisable() {
        btnSetuju.setEnabled(false);
        btnTolak.setEnabled(false);
    }
    private void txtApprovalCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtApprovalCaretUpdate
        if (txtApproval.getText().isEmpty()) {
            btnApprovalEnable();
        } else {
            btnApprovalDisable();
        }
    }//GEN-LAST:event_txtApprovalCaretUpdate

    private void btnTolakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTolakActionPerformed
        hapusTransaksiPeminjaman();
//            tolakTransaksiPeminjaman();
    }//GEN-LAST:event_btnTolakActionPerformed

    private void btnSetujuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetujuActionPerformed
        terimaTransaksiPeminjaman();
    }//GEN-LAST:event_btnSetujuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSetuju;
    private javax.swing.JButton btnTolak;
    private javax.swing.JComboBox cboTransaksi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKet;
    private javax.swing.JLabel lblOpen;
    private javax.swing.JMenuItem pmnuApproval;
    private javax.swing.JMenuItem pmnuTolak;
    private javax.swing.JTable tableView;
    private javax.swing.JTable tableViewDetail;
    private javax.swing.JTextField txtApproval;
    private javax.swing.JTextField txtKet;
    private javax.swing.JTextField txtOpen;
    private javax.swing.JTextField txtPembawa;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void hapusTransaksiPeminjaman() {
        Peminjaman a = daftarPeminjaman.get(tableController.getRowSelected());
        int jawab = JOptionPane.showOptionDialog(this, "Data transaksi yang di tolak akan dihapus, Kode Transasksi : " + a.getKode() + " ?", getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (jawab == JOptionPane.YES_OPTION) {
            try {
                repoPeminjaman.deletePeminjamanDetail(daftarPeminjamanDetail);
                refreshDataTablesPeminjaman();
                tableControllerDetail.clearData();
                btnApprovalDisable();
                clearField();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Tidak dapat menghapus data aset", getTitle(), JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(ApprovalTransaksi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void terimaTransaksiPeminjaman() {
        Peminjaman a = daftarPeminjaman.get(tableController.getRowSelected());
        int jawab = JOptionPane.showOptionDialog(this, "Setujui Transaksi dengan kode " + a.getKode() + " ?", getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (jawab == JOptionPane.YES_OPTION) {
            try {
                a.setApproval("Disetujui");
                repoPeminjaman.updateApproval(a);
                refreshDataTablesPeminjaman();
                btnApprovalDisable();
                txtApproval.setText("Disetujui");
//              tableControllerDetail.clearData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Tidak dapat menerima data aset", getTitle(), JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(ApprovalTransaksi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void tolakTransaksiPeminjaman() {
        Peminjaman a = daftarPeminjaman.get(tableController.getRowSelected());
        int jawab = JOptionPane.showOptionDialog(this, "Tolak Transaksi, Kode Transasksi : " + a.getKode() + " ?", getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (jawab == JOptionPane.YES_OPTION) {
            try {
                repoPeminjaman.updatePeminjamanDetail(daftarPeminjamanDetail);
                refreshDataTablesPeminjaman();
//                    tableControllerDetail.clearData();
                btnApprovalDisable();
//                   clearField();
                txtApproval.setText("Ditolak");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Tidak dapat menghapus data aset", getTitle(), JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(ApprovalTransaksi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clearField() {
        txtPembawa.setText("");
        txtUser.setText("");
        txtKet.setText("");
        txtOpen.setText("");
        txtApproval.setText("");
    }

}
